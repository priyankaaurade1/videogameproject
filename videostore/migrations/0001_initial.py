# Generated by Django 5.2.1 on 2025-07-04 15:05

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('number', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('superadmin', 'SuperAdmin'), ('staff', 'Staff')], max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='videostore.store')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GameData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.CharField(max_length=50)),
                ('date', models.DateField(auto_now_add=True)),
                ('time', models.TimeField(auto_now_add=True)),
                ('customer_name', models.CharField(max_length=100)),
                ('in_points', models.PositiveIntegerField()),
                ('out_points', models.PositiveIntegerField()),
                ('good_luck', models.PositiveIntegerField()),
                ('expense_type', models.CharField(choices=[('salary', 'Salary'), ('tea', 'Tea'), ('water', 'Water'), ('lightbill', 'Light Bill'), ('police', 'Police'), ('goodluck', 'Good Luck'), ('other', 'Other')], max_length=50)),
                ('expense_amt', models.PositiveIntegerField(default=0)),
                ('bill_no', models.CharField(max_length=100)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='uploads/')),
                ('remarks', models.TextField(blank=True)),
                ('reading_1', models.PositiveIntegerField(default=0)),
                ('reading_3', models.PositiveIntegerField(default=0)),
                ('reading_4', models.PositiveIntegerField(default=0)),
                ('reading_5', models.PositiveIntegerField(default=0)),
                ('entry_source', models.CharField(choices=[('customer_staff_entry', 'Customer Entry'), ('staff_entry', 'Staff Entry')], default='customer_staff_entry', max_length=30)),
                ('staff', models.ForeignKey(limit_choices_to={'role': 'staff'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('machine', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='videostore.machine')),
            ],
        ),
        migrations.CreateModel(
            name='GameDataPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='reading_photos/')),
                ('game_data', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='videostore.gamedata')),
            ],
        ),
        migrations.AddField(
            model_name='machine',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='videostore.store'),
        ),
    ]
